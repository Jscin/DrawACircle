{
xVals <- c((cos(radian) * radius) + xCenter)
yVals <- c((sin(radian) * radius) + yCenter)
radian = radian + radianStep
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Supplemental Functions Below ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * * Provide Description of function ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Core "Ring" Functions Below ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * * Provide Description of function ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}
}
print("Test")
calcpoints <- function(radius, xCenter, yCenter, resolution)
{
circumference <- 2 * pi * radius
dots <- circumference * resolution
radianStep <- ((360 / dots) * pi) / 180
index <- 0
while (radian <= 2 * pi)
{
xVals <- (cos(radian) * radius) + xCenter
yVals <- (sin(radian) * radius) + yCenter
radian = radian + radianStep
}
}
calcpoints <- function(radius, xCenter, yCenter, resolution)
{
circumference <- 2 * pi * radius
dots <- circumference * resolution
radianStep <- ((360 / dots) * pi) / 180
index <- 0
while (radian <= 2 * pi)
{
xVals <- (cos(radian) * radius) + xCenter
yVals <- (sin(radian) * radius) + yCenter
radian = radian + radianStep
}
}
raw_df <- calcpoints(radius, x, y, resolution)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Input Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
radius = 5
x = 0
y = 0
resolution = 0.5
raw_df <- calcpoints(radius, x, y, resolution)
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Input Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
radius = 5
x = 0
y = 0
resolution = 0.5
raw_df <- calcpoints(radius, x, y, resolution)
}
source("~/Draw a Circle/DrawACircle/Circle_Engine.R")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Output Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
print("Test")
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Output Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
print("Test")
}
{
{
library(ggplot2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### Functions needed to run this engine. ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
calcpoints <- function(radius, xCenter, yCenter, resolution)
{
circumference <- 2 * pi * radius
dots <- circumference * resolution
radianStep <- ((360 / dots) * pi) / 180
index <- 0
while (radian <= 2 * pi)
{
xVals <- (cos(radian) * radius) + xCenter
yVals <- (sin(radian) * radius) + yCenter
radian = radian + radianStep
}
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Supplemental Functions Below ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# {
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * * Provide Description of function ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# }
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Core "Ring" Functions Below ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# {
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * * Provide Description of function ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# }
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### Beta Test Zone for the engine: ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
betaMode = TRUE # Set this to TRUE to test the engine, set to FALSE if it is to run with the UI.
if(betaMode == TRUE){
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Input Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
radius = 5
x = 0
y = 0
resolution = 0.5
raw_df <- calcpoints(radius, x, y, resolution)
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Output Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
print("Test")
}
}
raw_df <- calcpoints(radius, x, y, resolution)
devtools:::test_active_file()
q()
paste("Hello", "World")
print("Test")
x <- 0
y <- 6
z <- x + y
print(z)
clear()
?ggplot2
library(ggplot2)
?ggplot2
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
debugSource("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
while (radian <= 2 * pi)
{
xVals <- (cos(radian) * radius) + xCenter
yVals <- (sin(radian) * radius) + yCenter
radian = radian + radianStep
}
circumference <- 2 * pi * radius
dots <- circumference * resolution
radian <- 0
radianStep <- ((360 / dots) * pi) / 180
index <- 0
while (radian <= 2 * pi)
{
xVals <- (cos(radian) * radius) + xCenter
yVals <- (sin(radian) * radius) + yCenter
radian = radian + radianStep
}
source("~/Draw a Circle/DrawACircle/Circle_Engine.R")
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
debugSource("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
View(calcpoints)
View(calcpoints)
raw_df <- Calcpoints(radius, x, y, resolution)
View)_
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
####  Title: Draw a Circle Exercise
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Purpose: Use R and R Shiny to graph a 'perfect' circle
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### Libraries Needed for engine to function: ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(ggplot2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### Functions needed to run this engine. ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Calcpoints <- function(radius, xCenter, yCenter, resolution)
{
circumference <- 2 * pi * radius
dots <- circumference * resolution
radian <- 0
radianStep <- ((360 / dots) * pi) / 180
x <- c(xCenter)
y <- c(yCenter)
while (radian <= 2 * pi)
{
x <- c(x, (cos(radian) * radius) + xCenter)
y <- c(y, (sin(radian) * radius) + yCenter)
radian = radian + radianStep
}
plotPoints <- list(x, y)
return(plotPoints)
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Supplemental Functions Below ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * * Provide Description of function ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Core "Ring" Functions Below ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * * Provide Description of function ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### Beta Test Zone for the engine: ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
betaMode = TRUE # Set this to TRUE to test the engine, set to FALSE if it is to run with the UI.
if(betaMode == TRUE){
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Input Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
radius = 5
x = 0
y = 0
resolution = 0.5
raw_df <- Calcpoints(radius, x, y, resolution)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Output Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
View(raw_df)
if(betaMode == TRUE){
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Input Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
radius = 5
x = 0
y = 0
resolution = 0.5
raw_df <- Calcpoints(radius, x, y, resolution)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Output Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ggplot2(raw_df, aes(x = raw_df$x, y = raw_df$y)) + geom_point()
}
resolution = 0.5
x = 0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Output Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ggplot(raw_df) + geom_point()
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Output Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ggplot(df, aes(x = xVals, y = yVals)) + geom_path()
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
}
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
debugSource("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
View(calcpoints)
View(Calcpoints)
View(Calcpoints)
View(Calcpoints)
View(Calcpoints)
View(calcpoints)
View(calcpoints)
View(Calcpoints)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#### * Output Section ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ggplot(df, aes(x = x, y = y)) + geom_path()
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
y <- 1
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Circle_Engine.R", echo=TRUE)
shiny::runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
shiny::runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp()
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp()
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
View(df)
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp()
runApp('Draw_A_Circle')
runApp()
runApp()
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
source("~/Draw a Circle/DrawACircle/Draw_A_Circle/Circle_Engine.R", echo=TRUE)
source("~/Draw a Circle/DrawACircle/Draw_A_Circle/Circle_Engine.R", echo=TRUE)
View(df)
source("~/Draw a Circle/DrawACircle/Draw_A_Circle/Circle_Engine.R", echo=TRUE)
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
shiny::runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
runApp('Draw_A_Circle')
shiny::runApp('Draw_A_Circle')
shiny::runApp('Draw_A_Circle')
